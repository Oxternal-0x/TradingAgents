#!/usr/bin/env python3
"""
Gmail Alert Setup Helper for oxternal.0x@gmail.com

This script helps you set up Gmail alerts step by step.
"""

import getpass
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

def test_gmail_connection(email, password):
    """Test Gmail SMTP connection"""
    try:
        print("🔐 Testing Gmail connection...")
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(email, password)
        server.quit()
        print("✅ Gmail connection successful!")
        return True
    except Exception as e:
        print(f"❌ Gmail connection failed: {e}")
        return False

def send_test_email(email, password):
    """Send a test trading alert email"""
    try:
        print("📧 Sending test trading alert...")
        
        msg = MIMEMultipart()
        msg['From'] = email
        msg['To'] = email
        msg['Subject'] = "🚨 Test Trading Alert - System Working!"
        
        body = """
        <html>
        <body>
        <h2>🚨 Trading Alert Test</h2>
        <p><strong>Congratulations!</strong> Your trading alert system is now working.</p>
        
        <h3>📊 Sample Trade Alert</h3>
        <ul>
        <li><strong>Ticker:</strong> AAPL</li>
        <li><strong>Decision:</strong> BUY</li>
        <li><strong>Date:</strong> 2025-06-27</li>
        <li><strong>Confidence:</strong> 85%</li>
        </ul>
        
        <h3>📈 Analysis Summary</h3>
        <p>This is a test alert. Your real alerts will contain actual market analysis and trading signals.</p>
        
        <p><em>Sent from your Trading Agents Alert System</em></p>
        </body>
        </html>
        """
        
        msg.attach(MIMEText(body, 'html'))
        
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(email, password)
        server.send_message(msg)
        server.quit()
        
        print("✅ Test email sent successfully!")
        print(f"📧 Check your inbox at {email}")
        return True
        
    except Exception as e:
        print(f"❌ Failed to send test email: {e}")
        return False

def create_working_config(email, password):
    """Create a working alert configuration file"""
    config_content = f'''#!/usr/bin/env python3
"""
Working Alert Configuration for {email}
Generated by setup script
"""

# Your working Gmail alert configuration
GMAIL_ALERT_CONFIG = {{
    "alerts_enabled": True,
    "alert_on_decisions": ["BUY", "SELL"],
    
    "notification_handlers": {{
        "email": {{
            "enabled": True,
            "smtp_server": "smtp.gmail.com",
            "smtp_port": 587,
            "sender_email": "{email}",
            "sender_password": "{password}",
            "recipient_emails": ["{email}"],
            "use_tls": True,
        }}
    }}
}}

# Multi-channel config (email + webhook)
FULL_ALERT_CONFIG = {{
    "alerts_enabled": True,
    "alert_on_decisions": ["BUY", "SELL"],
    
    "notification_handlers": {{
        "email": {{
            "enabled": True,
            "smtp_server": "smtp.gmail.com",
            "smtp_port": 587,
            "sender_email": "{email}",
            "sender_password": "{password}",
            "recipient_emails": ["{email}"],
            "use_tls": True,
        }},
        "webhook": {{
            "enabled": True,
            "url": "https://webhook.site/your-unique-url",  # Replace with your webhook URL
            "method": "POST",
            "headers": {{
                "Authorization": "Bearer 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",
                "Content-Type": "application/json"
            }}
        }}
    }}
}}
'''
    
    try:
        with open('working_alert_config.py', 'w') as f:
            f.write(config_content)
        print("✅ Created working_alert_config.py")
        return True
    except Exception as e:
        print(f"❌ Failed to create config file: {e}")
        return False

def main():
    print("📧 Gmail Alert Setup for Trading Agents")
    print("=" * 50)
    print(f"📧 Email: oxternal.0x@gmail.com")
    print()
    
    print("📋 Setup Steps:")
    print("1. Enable 2-factor authentication on your Google account")
    print("2. Generate an App Password for Mail")
    print("3. Test the connection")
    print("4. Create working configuration")
    print()
    
    print("🔗 To generate an App Password:")
    print("   1. Go to https://myaccount.google.com/security")
    print("   2. Enable 2-factor authentication if not already enabled")
    print("   3. Go to 'App passwords'")
    print("   4. Select 'Mail' and generate a password")
    print("   5. Use that 16-character password below")
    print()
    
    email = "oxternal.0x@gmail.com"
    
    # Get app password
    password = getpass.getpass("Enter your Gmail App Password (16 characters): ")
    
    if len(password) != 16:
        print("⚠️ Gmail App Passwords are typically 16 characters long")
        print("   Make sure you're using the App Password, not your regular password")
    
    # Test connection
    if test_gmail_connection(email, password):
        # Send test email
        if send_test_email(email, password):
            # Create working config
            if create_working_config(email, password):
                print("\n🎉 Gmail alerts setup complete!")
                print("\n📋 Next steps:")
                print("1. Check your email for the test alert")
                print("2. Use working_alert_config.py in your trading system")
                print("3. Run: python3 test_gmail_alerts.py")
            else:
                print("❌ Failed to create configuration file")
        else:
            print("❌ Email test failed")
    else:
        print("❌ Gmail connection failed")
        print("\n🔧 Troubleshooting:")
        print("- Make sure 2-factor authentication is enabled")
        print("- Use an App Password, not your regular password")
        print("- Check that the App Password is correct")

if __name__ == "__main__":
    main()